要依赖抽象，不要依赖具体的类

依赖倒置：依赖抽象的类，中间具体类的依赖就省却了很多。解耦上下层关系。

工厂模式核心要点就是，把实例化对象的过程独立出来，成为一个工厂。

因：Spuer下的实现类太多，挨个new太冗余，臃肿
因：Factory下的实现类太多，Factory接口化或者其他实现，便于扩展

果：工厂模式，创建者拥有工厂的声明，去实现产品的实例化。

1个工厂简单------一堆判断，if,switch什么的
2个以上就得抽象工厂--------作为框架，什么时候去调用，注入什么的。




1.简单工厂，实例化对象的工具类而已
没有优化扩展，没什么新鲜东西

public class SimpleFactory{
    public SuperObject  getAInstance(String type){
      if(type.equals("xxxx"))
        return new Aclass();
        ....
    }
}

2，静态工厂，实例化对象的工具类而已
缺点：无法继承改变行为；

public class SimpleFactory{
    public static AClass getAInstance(){
        return new Aclass();
    }
}


工厂方法模式：定义了一个创建对象的接口，但由子类决定要实例化的类是哪个，工厂方法让类的实例化推迟到了子类。给实际用的人，去选择。更方便简洁。解耦实现和使用的关系。

