分治法：将原问题划分成n个规模较小而结构与原问题相似的子问题；递归的解决这些子问题，然后在合并其结果，就得到了原问题的解。

分支模式：每层递归上都有三个步骤
1.分解：将原问题分解成一系列子问题
2.解决：递归的解决子问题。若子问题较小，直接求解
3.合并：将子问题的结果合并成原问题的解


合并排序：
1.分解：将n个元素分成各含n/2个元素的子序列。
2.解决：用合并排序法对两个子序列递归的排序
3.合并：合并子序列的排序

对子序列排序时，长度为1时递归结束，单个元素视为已排好序。


static void merge_sort_recursive(int[] arr, int[] result, int start, int end) {
	if (start >= end)
		return;
    //分解子序列
	int len = end - start, mid = (len >> 1) + start;
	int start1 = start, end1 = mid;
	int start2 = mid + 1, end2 = end;
  //递归
	merge_sort_recursive(arr, result, start1, end1);
	merge_sort_recursive(arr, result, start2, end2);
//合并子序列
	int k = start;
	while (start1 <= end1 && start2 <= end2)
		result[k++] = arr[start1] < arr[start2] ? arr[start1++] : arr[start2++];
	while (start1 <= end1)
		result[k++] = arr[start1++];
	while (start2 <= end2)
		result[k++] = arr[start2++];
	for (k = start; k <= end; k++)
		arr[k] = result[k];
}


public static void merge_sort(int[] arr) {
	int len = arr.length;
	int[] result = new int[len];
	merge_sort_recursive(arr, result, 0, len - 1);
}

