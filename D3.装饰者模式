类应该对扩展开放，对修改关闭。

解决：类数量爆炸、设计死板，以及基类加入的新功能并不适用于所
有的子类

继承属于扩展形式之一，但不见得是达到弹性设计的最佳方式。
在我们的设计中，应该允许行为可以被扩展，而无须修改现有的代码。
组合和委托可用于在运行时动态地加上新的行为。
除了继承，装饰者模式也可以让我们扩展行为。
装饰者模式意味着一群装饰者类，这些类用来包装具体组件。
装饰者类反映出被装饰的组件类型（事实上，他们具有相同的类型，都经过接口或继承实现）。
装饰者可以在被装饰者的行为前面与 / 或后面加上自己的行为，甚至将被装饰者的行为整个取代掉，而达到特定的目的。
你可以用无数个装饰者包装一个组件。
装饰者一般对组件的客户是透明的，除非客户程序依赖于组件的具体类型。
装饰者会导致设计中出现许多小对象，如果过度使用，会让程序变得很复杂。


逻辑思路：
装饰者：同一个超类型
被装饰者：同一个超类型，但是被装饰者包裹声明。

装饰者动态的扩展了功能。


abstract class Super{
    abstract void MethodA();
}

class A extends Super{  //  被装饰者出现
    void MethodA(){
      //这个方法前后要被装饰者扩展
    }
}

class B extends Super{//也可以作为装饰者
    
    void MethodB(){
    }
    
     void MethodA(){
      //这个方法前后要被装饰者扩展
      super.MethodA();
    }
}

class C extends Super{//装饰者出现，装饰了B类，因为Super super=new B();
    Super super;
    public C(Super super){
      this.super=super;
    }
    void MethodC(){
      beforeMethod();//扩暂
      super.MethodA();
      afterMethod();//扩暂
    }
}

main{
    Super super=new B();
    C c=new C(super);//装饰者运行
    c.methdC();   
  
}

c扩展了b,但是c没有继承b,比继承更灵活。


装饰者这个模式：好就好在动态的扩展，不用修改之前的类。
               调用层不会知道具体的操作。

但是在实例化的时候比较麻烦点，会配合其他模式一起操作。






装饰者模式 ：动态地将责任附加到对象上。想要扩展功能，装饰者提供有别于继承的另一种选择。
